version: "3"
services:

  broker:
    image: confluentinc/cp-kafka:7.4.1
    container_name: broker
    hostname: broker
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_AUTO_CREATE_TOPICS_NUM_PARTITIONS: 1
      KAFKA_AUTO_CREATE_TOPICS_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker:29092,PLAINTEXT_HOST://broker:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      # Replace CLUSTER_ID with a unique base64 UUID using "bin/kafka-storage.sh random-uuid" 
      # See https://docs.confluent.io/kafka/operations-tools/kafka-tools.html#kafka-storage-sh
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
    networks:
      - my-network
      
  control-center:
    image: confluentinc/cp-enterprise-control-center:7.4.1
    hostname: control-center
    container_name: control-center
    depends_on:
      - broker
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
    networks:
      - my-network

  producer:
    container_name: producer 
    build:
      context: ./simpleserialize-producer
      dockerfile: Dockerfile.producer
    environment:
      - KAFKA_TOPIC=${KAFKA_TOPIC}
      - KAFKA_BROKER_HOST=${KAFKA_BROKER_HOST}
      - KAFKA_BROKER_PORT=${KAFKA_BROKER_PORT}
    depends_on:
      - broker
    networks:
      - my-network
      
  database:
    container_name: database
    hostname: database
    restart: always
    ports: 
      - 5432:5432
    build: 
      context: ./database
      dockerfile: Dockerfile.database
    environment:
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
    volumes: 
      - my_postgres_data:/var/lib/postgresql/data
    networks:
      - my-network
      
  jobmanager:
    container_name: jobmanager
    hostname: jobmanager
    image: flink:1.17-scala_2.12
    mem_limit: 4g
    depends_on:
      - database
      - broker
    ports:
      - "8081:8081"
    expose:
      - 6123
    command: standalone-job --job-classname com.example.sharov.anatoliy.simpleserialize.flink.DataStreamJob
    volumes:
      - ./simpleserialize-consumer-flink-postgresql/build/libs/simpleserialize-consumer-flink-postgresql-0.1-SNAPSHOT-all.jar:/opt/flink/usrlib/my_api.jar
    environment:
      - |
        FLINK_PROPERTIES:
        jobmanager.rpc.address: jobmanager
        jobmanager.rpc.port: 6123
        parallelism.default: 4
        
        resourcemanager.taskmanager-registration.timeout: 59 min
      - KAFKA_TOPIC=${KAFKA_TOPIC}
      - KAFKA_BROKER_HOST=${KAFKA_BROKER_HOST}
      - KAFKA_BROKER_PORT=${KAFKA_BROKER_PORT}
      - DATABASE_URL=${DATABASE_URL}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
    networks:
      - my-network

  taskmanager:
    container_name: taskmanager
    hostname: taskmanager
    image: flink:1.17-scala_2.12
    mem_limit: 4g
    expose:
      - 6123
    depends_on:
      - jobmanager
    links:
    - jobmanager
    command: taskmanager
    scale: 1
    volumes:
      - ./simpleserialize-consumer-flink-postgresql/build/libs/simpleserialize-consumer-flink-postgresql-0.1-SNAPSHOT-all.jar:/opt/flink/usrlib/my_api.jar
    environment:
      - |
        FLINK_PROPERTIES:
        jobmanager.rpc.address: jobmanager
        jobmanager.rpc.port: 6123
        taskmanager.numberOfTaskSlots: 2
        parallelism.default: 4 
        resourcemanager.taskmanager-registration.timeout: 59 min
        
      - KAFKA_TOPIC=${KAFKA_TOPIC}
      - KAFKA_BROKER_HOST=${KAFKA_BROKER_HOST}
      - KAFKA_BROKER_PORT=${KAFKA_BROKER_PORT}
      - DATABASE_URL=${DATABASE_URL}      
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
    networks:
      - my-network

networks:
  my-network:
#    driver: bridge
    
volumes:
  my_postgres_data:
  
