version: "3"
services:

  broker:
    hostname: broker
    container_name: broker
    image: confluentinc/cp-kafka:7.4.1
    ports:
      - 9092:9092
      - 9101:9101
    environment:
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_AUTO_CREATE_TOPICS_NUM_PARTITIONS: 1
      KAFKA_AUTO_CREATE_TOPICS_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      # Replace CLUSTER_ID with a unique base64 UUID using "bin/kafka-storage.sh random-uuid" 
      # See https://docs.confluent.io/kafka/operations-tools/kafka-tools.html#kafka-storage-sh
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'

  control-center:
    hostname: control-center
    container_name: control-center
    image: confluentinc/cp-enterprise-control-center:7.4.1
    depends_on:
      - broker
    ports:
      - 9021:9021
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  producer:
    container_name: producer   
    depends_on:
      - broker 
    build:
      context: ./simpleserialize-producer
      dockerfile: Dockerfile.crawler-producer
    envorenment:
      TOPIC_KAFKA: protobuf-data
      HOST_KAFKA: broker
      PORT_KAFKA: 9092
      
  postgres:
    hostname: database
    container_name: database
    restart: always
    ports:
      - 5432:5432
        build:
      context: ./database
      dockerfile: Dockerfile.postgres-database
    environment:
      POSTGRES_DB: newses
      POSTGRES_USER: crawler
      POSTGRES_PASSWORD: 1111
    volumes:
      - my_postgres_data:/var/lib/postgresql/data

  jobmanager:
    container_name: consumer-jobmanager
    depends_on:
      - postgres
      - broker
    ports:
      - 8081:8081
    build:
      context: ./simpleserialize-consumer-flink-postgresql
      dockerfile: Dockerfile.consumer-jobmanager
    environment:
      TOPIC: protobuf-data
      KAFKA_GROUP: protobuf-data
      KAFKA_HOST_NAME: broker
      KAFKA_PORT: 9092
      DATABASE_HOST_NAME: database
      DATABASE_PORT: 5432
      DATABASE_USERNAME: crawler
      DATABASE_PASSWORD: 1111

  taskmanager:
    container_name: consumer-taskmanager
    depends_on:
      - jobmanager
    build:
      context: ./simpleserialize-consumer-flink-postgresql
      dockerfile: Dockerfile.consumer-jobmanager
    environment:
      TOPIC: protobuf-data
      KAFKA_GROUP: protobuf-data
      KAFKA_HOST_NAME: broker
      KAFKA_PORT: 9092
      DATABASE_HOST_NAME: database
      DATABASE_PORT: 5432
      DATABASE_USERNAME: crawler
      DATABASE_PASSWORD: 1111

volumes:
  my_postgres_data:

networks:
  my_network: 
    driver: bridge
