plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id "com.google.protobuf" version "0.9.4"
}

group = 'com.example.sharov.anatoliy.flink'
version = '0.1-SNAPSHOT'
mainClassName = 'com.example.sharov.anatoliy.flink.DataStreamJob'
description = """Flink Quickstart Job"""

ext {
    javaVersion = '11'
    flinkVersion = '1.17.1'
    scalaBinaryVersion = '_2.12'
    slf4jVersion = '1.7.36'
    log4jVersion = '2.17.1'
    
    protocVersion = '3.24.2'
    protobufTwitterChillVersion = '0.10.0'
    kafkaClientsVersion = '3.5.1'
    
    flinkConnectorJdbcVersion = '3.1.1-1.17'
    postgresqlVersion = '42.6.0'
    testcontainersVersion = '1.18.3'
    mockitoVersion = '5.4.0'
    junitVersion = '5.7.0'
}

sourceCompatibility = javaVersion
targetCompatibility = javaVersion
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
applicationDefaultJvmArgs = ["-Dlog4j.configurationFile=log4j2.properties"]

repositories {
    mavenCentral()
    maven {
        url "https://repository.apache.org/content/repositories/snapshots"
        mavenContent {
            snapshotsOnly()
        }
    }
}

configurations {
    flinkShadowJar
    flinkShadowJar.exclude group: 'org.apache.flink', module: 'force-shading'
    flinkShadowJar.exclude group: 'com.google.code.findbugs', module: 'jsr305'
    flinkShadowJar.exclude group: 'org.slf4j'
    flinkShadowJar.exclude group: 'org.apache.logging.log4j'
}
// declare the dependencies for your production and test code
dependencies {
    // --------------------------------------------------------------
    // Compile-time dependencies that should NOT be part of the
    // shadow (uber) jar and are provided in the lib folder of Flink
    // --------------------------------------------------------------
    implementation "org.postgresql:postgresql:${postgresqlVersion}"
    
    implementation "com.google.protobuf:protobuf-javalite:${protocVersion}"
    implementation "com.google.protobuf:protobuf-java:${protocVersion}"
    implementation ("com.twitter:chill-protobuf:${protobufTwitterChillVersion}") {
        exclude group: 'com.esotericsoftware.kryo', module: 'kryo'
    }
    
    implementation "org.apache.flink:flink-streaming-java:${flinkVersion}"
    implementation "org.apache.flink:flink-clients:${flinkVersion}"
    implementation "org.apache.flink:flink-connector-jdbc:${flinkConnectorJdbcVersion}"
    implementation "org.apache.flink:flink-connector-kafka:${flinkVersion}"    
    implementation "org.apache.kafka:kafka-clients:${kafkaClientsVersion}"    
    
    
    // --------------------------------------------------------------
    // Dependencies that should be part of the shadow jar, e.g.
    // connectors. These must be in the flinkShadowJar configuration!
    // --------------------------------------------------------------
    flinkShadowJar "com.google.protobuf:protobuf-javalite:${protocVersion}"
    flinkShadowJar "com.google.protobuf:protobuf-java:${protocVersion}"
    implementation "org.apache.kafka:kafka-clients:${kafkaClientsVersion}"

    flinkShadowJar ("com.twitter:chill-protobuf:${protobufTwitterChillVersion}") {
        exclude group: 'com.esotericsoftware.kryo', module: 'kryo'
        }
    flinkShadowJar "org.postgresql:postgresql:${postgresqlVersion}"
    flinkShadowJar "org.apache.flink:flink-connector-jdbc:${flinkConnectorJdbcVersion}"
    flinkShadowJar "org.apache.flink:flink-connector-kafka:${flinkVersion}"
    runtimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"
    runtimeOnly "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    runtimeOnly "org.apache.logging.log4j:log4j-core:${log4jVersion}"
    // Add test dependencies here.
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation "org.apache.flink:flink-test-utils:${flinkVersion}"
    testImplementation "org.apache.flink:flink-test-utils-junit:${flinkVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    testImplementation "org.testcontainers:testcontainers:${testcontainersVersion}"
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
    testImplementation "org.testcontainers:postgresql:${testcontainersVersion}"
    testImplementation "org.testcontainers:kafka:${testcontainersVersion}"
    
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

sourceSets {
    main.compileClasspath += configurations.flinkShadowJar
    main.runtimeClasspath += configurations.flinkShadowJar
    test.compileClasspath += configurations.flinkShadowJar
    test.runtimeClasspath += configurations.flinkShadowJar
    javadoc.classpath += configurations.flinkShadowJar
}
run.classpath = sourceSets.main.runtimeClasspath

protobuf {
  protoc {
    artifact = "com.google.protobuf:protoc:${protocVersion}"
  }
  generateProtoTasks {
    all().configureEach { task ->
      task.builtins {
        java {
//          option "lite"
        }
      }
    }
  }
}

jar {
    manifest {
        attributes 'Built-By': System.getProperty('user.name'),
                'Build-Jdk': System.getProperty('java.version')
    }
}

shadowJar {
    configurations = [project.configurations.flinkShadowJar]
}
