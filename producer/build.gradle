plugins {
  id "java"
  id "com.google.protobuf" version "0.9.4"
  id "com.github.johnrengelman.shadow" version "7.1.2"
}

ext {
    javaVersion = '11'
    slf4jnopVersion = '2.0.3'
    protocVersion = '3.24.2'
    kafkaclientsVersion = '3.3.1'
    junitVersion = '5.7.0'
    protobufconfluentkafkaVersion = '7.3.3'
}


version = "0.0.1"
group = 'com.example.sharov.anatoliy.producer'

sourceCompatibility = javaVersion
targetCompatibility = javaVersion
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()	
    maven {
        url "https://packages.confluent.io/maven"
    }
}

sourceSets {
  main {
    proto {
    }
    java {
    }
  }
  test {
    proto {
    srcDir 'src/test/proto'
    }
  }
}

dependencies {
  implementation "org.slf4j:slf4j-nop:${slf4jnopVersion}"

  implementation "com.google.protobuf:protobuf-javalite:${protocVersion}"
  implementation "io.confluent:kafka-protobuf-serializer:${protobufconfluentkafkaVersion}"
  implementation "com.google.protobuf:protobuf-java:${protocVersion}"
  implementation "org.apache.kafka:kafka-clients:${kafkaclientsVersion}"
  
  testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
  testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
	
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}


protobuf {
  protoc {
    artifact = "com.google.protobuf:protoc:${protocVersion}"
  }
  generateProtoTasks {
    all().configureEach { task ->
      task.builtins {
        java {
//          option "lite"
        }
      }
    }
  }
}

jar {
    manifest {
        attributes(
                "Class-Path": configurations.compileClasspath.collect { it.getName() }.join(" "),
                "Main-Class": "com.example.sharov.anatoliy.producer.Main"
        )
    }
}

shadowJar {
    archiveBaseName = "producer-all"
    archiveClassifier = ''
}
